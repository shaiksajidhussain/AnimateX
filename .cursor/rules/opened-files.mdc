---
description: 
globs: 
alwaysApply: true
---
# Opened Files
## File Name
src/Components/Robo.jsx
## File Content
import React, { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import Loader from './Loader'

const Robo = () => {
  const [isLoading, setIsLoading] = useState(true)
  const [iframeLoaded, setIframeLoaded] = useState(false)

  useEffect(() => {
    // Simulate loading time for the iframe
    const timer = setTimeout(() => {
      setIframeLoaded(true)
    }, 3000) // 3 seconds to simulate loading

    return () => clearTimeout(timer)
  }, [])

  useEffect(() => {
    if (iframeLoaded) {
      // Add a small delay before hiding the loader
      const timer = setTimeout(() => {
        setIsLoading(false)
      }, 500)
      return () => clearTimeout(timer)
    }
  }, [iframeLoaded])

  return (
    <>
      <AnimatePresence mode='wait'>
        {isLoading ? (
          <Loader key="loader" setLoading={setIsLoading} />
        ) : (
          <motion.div 
            key="robo-content"
            style={{width:"100%", height:"100%", position: "fixed" , top: 0, left: 0 , zIndex: 1 }}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            {/* Original iframe with pointer-events-auto to ensure interaction */}
            <iframe 
              src='https://my.spline.design/nexbotrobotcharacterconcept-bd1651e9afe2846c7c8e174953fad288/' 
              frameBorder='0' 
              width='100%' 
              height='100%'
              style={{ position: 'absolute', pointerEvents: 'auto' }}
            />

            {/* Text overlay with pointer-events-none except for hover targets */}
            <motion.div 
              className="absolute inset-0 flex flex-col items-center justify-center text-center"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 1, delay: 0.3 }}
              style={{ pointerEvents: 'none' }}
            >
              <div style={{ pointerEvents: 'auto' }}>
                <motion.h1 
                  className="text-4xl md:text-6xl font-black mb-4 cursor-pointer"
                  initial={{ y: -50, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  style={{
                    color: '#fff',
                    fontFamily: 'Parkinsans, serif',
                    letterSpacing: '0.1em',
                    lineHeight: '1',
                    fontWeight: 900,
                  }}
                >
                  <motion.div
                    className="relative inline-block"
                    whileHover={{
                      scale: 1.05,
                      color: '#4FFBDF',
               
                      transition: {
                        duration: 0.3,
                        ease: "easeOut"
                      }
                    }}
                  >
                    Next{' '}
                  </motion.div>
                  <motion.div
                    className="relative inline-block"
                    whileHover={{
                      scale: 1.05,
                      color: '#4FFBDF',
              
                      transition: {
                        duration: 0.3,
                        ease: "easeOut"
                      }
                    }}
                  >
                    Generation
                  </motion.div>
                </motion.h1>
                
                <motion.p
                  className="text-xl md:text-3xl cursor-pointer"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  whileHover={{ 
                    scale: 1.05,
                    textShadow: [
                      '0 0 25px rgba(79,251,223,0.9)',
                      '0 0 35px rgba(79,251,223,0.7)',
                      '0 0 45px rgba(79,251,223,0.5)',
                    ],
                  }}
                  transition={{ 
                    duration: 0.3,
                    ease: "easeOut"
                  }}
                  style={{
                    color: '#4FFBDF',
                    fontFamily: 'Parkinsans, serif',
                    letterSpacing: '0.15em',
                    fontWeight: 500,
                    marginTop: '0.5rem',
                  }}
                >
                  Animation Framework
                </motion.p>

                <motion.div
                  className="text-sm md:text-base mt-6 cursor-pointer"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 0.8 }}
                  whileHover={{ 
                    scale: 1.05,
                    opacity: 1,
                    color: '#4FFBDF',
                    textShadow: [
                      '0 0 20px rgba(79,251,223,0.8)',
                      '0 0 30px rgba(79,251,223,0.6)',
                    ],
                  }}
                  transition={{ 
                    duration: 0.3,
                    ease: "easeOut"
                  }}
                  style={{
                    color: '#fff',
                    fontFamily: 'Parkinsans, serif',
                    letterSpacing: '0.2em',
                    fontWeight: 400,
                    padding: '0.5rem 1rem',
                  }}
                >
                  Powered by Shaik Sajid Hussain 
                </motion.div>
              </div>
            </motion.div>

            <motion.div 
              initial={{ y: 50, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ duration: 0.8, delay: 1 }}
              style={{
                position: 'absolute',
                bottom: 20,
                right: 2,
                width: '250px',
                height: '65px',
                background: '#000',
         
                zIndex: 1000
              }}
            />
          </motion.div>
        )}
      </AnimatePresence>
    </>
  )
}

export default Robo
# Opened Files
## File Name
src/App.jsx
## File Content
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'
import { AnimatePresence } from 'framer-motion';
import Robo from './Components/Robo';
import ComponentsShowcase from './Components/ComponentsShowcase';
import Layout from './components/layout/Layout';
// import SplitText from './components/animations/SplitText';
import SplitTextPage from './pages/components/split-text';
import BlurTextPage from './pages/components/blur-text';
import WaveTextPage from './pages/components/WaveTextPage';
import ShinyTextPage from './pages/components/ShinyTextPage';
import CountUpPage from './pages/components/CountUpPage';
import DecryptedTextPage from './pages/components/decrypted-text';
import BlobCursorPage from './pages/components/blob-cursor';
import MagneticButtonPage from './pages/components/magnetic-button';
import ShaderGradientPage from './pages/components/shader-gradient';
import BlobGradientPage from './pages/components/blob-gradient';
import MorphingSvgPage from './pages/components/morphing-svg';
import StringAnimationPage from './pages/components/string-animation';
// import AnimatedContainerPage from './pages/components/AnimatedContainer';
// ... import other component pages

function App() {
  // const [loading, setLoading] = useState(true);

  return (
    <Router>
      <AnimatePresence mode='wait'>
        {/* {loading ? (
          <Loader setLoading={setLoading} key="loader" />
        ) : ( */}
          <Routes>
            {/* Home route with Robo and ComponentsShowcase */}
            <Route 
              path="/" 
              element={
                <div className="bg-black min-h-screen relative">
                  <div className="h-screen">
                    <Robo/>
                  </div>
                  <div className="relative z-10">
                    <ComponentsShowcase/>
                  </div>
                </div>
              } 
            />

            {/* Documentation routes wrapped in Layout */}
            <Route 
              path="/components/*" 
              element={
                <Layout>
                  <Routes>
                    <Route path="/split-text" element={<SplitTextPage />} />
                    <Route path="/blur-text" element={<BlurTextPage />} />
                    <Route path="/wave-text" element={<WaveTextPage />} />
                    <Route path="/shiny-text" element={<ShinyTextPage />} />
                    <Route path="/count-up" element={<CountUpPage />} />
                    <Route path="/decrypted-text" element={<DecryptedTextPage />} />
                    <Route path="/blob-cursor" element={<BlobCursorPage/>} />
                    <Route path="/magnet" element={<MagneticButtonPage/>} />
                    <Route path="/shader-gradient" element={<ShaderGradientPage/>} />
                    <Route path="/blob-gradient" element={<BlobGradientPage/>} />
                    <Route path="/morphing-svg" element={<MorphingSvgPage/>} />
                    <Route path="/string-animation" element={<StringAnimationPage/>} />
             
                    {/* Add more component routes here */}
                  </Routes>
                </Layout>
              } 
            />
          </Routes>
        {/* )} */}
      </AnimatePresence>
    </Router>
  )
}

export default App
# Opened Files
## File Name
src/Components/ComponentsShowcase.jsx
## File Content
import React, { useCallback } from 'react';
import { motion, useReducedMotion } from 'framer-motion';

const ComponentCard = React.memo(({ title, subtitle, children }) => {
  return (
    <motion.div
      className="relative rounded-2xl overflow-hidden"
      whileHover={{ scale: 1.02 }}
      transition={{ duration: 0.2, type: "tween" }}
      style={{
        background: 'linear-gradient(135deg, rgba(0,255,255,0.15), rgba(0,255,255,0.05))',
        backdropFilter: 'blur(10px)',
        border: '1px solid rgba(0,255,255,0.1)',
        willChange: 'transform',
      }}
    >
      <div className="p-8 flex flex-col items-center justify-center min-h-[200px]">
        {children}
        <motion.div 
          className="mt-4 text-center"
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true }}
          transition={{ type: "tween" }}
        >
          <h3 className="text-[#3399FF] text-lg font-medium mb-1">{title}</h3>
          <p className="text-gray-400 text-sm">{subtitle}</p>
        </motion.div>
      </div>
    </motion.div>
  );
});

const ComponentsShowcase = () => {
  return (
    <section className="py-20 px-4 bg-[#0A0A0A]">
      <motion.h2 
        className="text-4xl md:text-5xl text-center mb-16 text-white font-bold"
        initial={{ opacity: 0, y: 20 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true }}
        transition={{ duration: 0.4, type: "tween" }}
      >
        Components
      </motion.h2>

      <div className="max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        <ComponentCard title="<SplitText />" subtitle="Text Animations">
          <div className="overflow-hidden">
            <motion.div 
              className="text-4xl text-white font-bold flex"
              initial="hidden"
              whileHover="visible"
              viewport={{ once: true }}
            >
              {'hello'.split('').map((char, i) => (
                <motion.span
                  key={i}
                  className="inline-block"
                  variants={{
                    hidden: { y: 0 },
                    visible: {
                      y: [-20, 0],
                      transition: {
                        duration: 0.4,
                        delay: i * 0.1,
                        type: "tween"
                      }
                    }
                  }}
                >
                  {char}
                </motion.span>
              ))}
            </motion.div>
          </div>
        </ComponentCard>

        <ComponentCard title="<BlurText />" subtitle="Text Animations">
          <motion.div 
            className="text-4xl text-white font-bold"
            whileHover={{ filter: 'blur(4px)' }}
            transition={{ duration: 0.2, type: "tween" }}
          >
            hello
          </motion.div>
        </ComponentCard>

        <ComponentCard title="<WaveText />" subtitle="Text Animations">
          <div className="flex">
            {'hello'.split('').map((char, i) => (
              <motion.span
                key={i}
                className="text-4xl text-white font-bold inline-block"
                whileHover={{
                  y: [0, -10, 0],
                  transition: {
                    duration: 0.3,
                    repeat: Infinity,
                    repeatType: "reverse",
                    delay: i * 0.05
                  }
                }}
              >
                {char}
              </motion.span>
            ))}
          </div>
        </ComponentCard>

        <ComponentCard title="<AnimatedContainer />" subtitle="Animations">
          <motion.div 
            className="w-16 h-16 flex items-center justify-center"
            initial={{ rotate: 0 }}
            whileHover={{ rotate: 360 }}
            transition={{ duration: 0.8, type: "tween", ease: "easeInOut" }}
            style={{ willChange: 'transform' }}
          >
            <svg viewBox="0 0 24 24" className="w-8 h-8 text-[#3399FF]">
              <path fill="currentColor" d="M7.4 15.4L6 14l6-6 6 6-1.4 1.4L12 10.8z"/>
            </svg>
          </motion.div>
        </ComponentCard>

        <ComponentCard title="<BlobCursor />" subtitle="Animations">
          <motion.div 
            className="w-16 h-16 bg-[#3399FF] rounded-full"
            initial={{ scale: 1, borderRadius: "50%" }}
            whileHover={{ 
              scale: [1, 1.2, 1],
              borderRadius: ["50%", "30%", "50%"],
              transition: {
                duration: 1,
                repeat: Infinity
              }
            }}
            style={{ willChange: 'transform, border-radius' }}
          />
        </ComponentCard>

        <ComponentCard title="<FollowCursor />" subtitle="Animations">
          <motion.div 
            className="w-16 h-16 bg-[#9DFF1E] rounded-lg"
            initial={{ x: 0 }}
            whileHover={{ 
              x: [0, 10, -10, 0],
              transition: {
                duration: 0.8,
                repeat: Infinity,
                ease: "linear"
              }
            }}
            style={{ willChange: 'transform' }}
          />
        </ComponentCard>
      </div>

<a href="/components">

      <motion.div 
        className="text-center mt-12"
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        viewport={{ once: true }}
        transition={{ duration: 0.3, type: "tween" }}
      >
        <motion.button
          className="px-6 py-3 bg-[#3399FF] text-white rounded-lg"
          whileHover={{ scale: 1.05, backgroundColor: '#9DFF1E' }}
          transition={{ duration: 0.2, type: "tween" }}
        >
          Browse more
        </motion.button>
      </motion.div>
</a>
    </section>
  );
};

export default React.memo(ComponentsShowcase); 
